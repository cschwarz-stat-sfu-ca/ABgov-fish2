plyr::summarize,
post.belief.gt.0 = mean(post.baci >0))
head(baci.belief)
ggplot(data=baci.post, aes(y=Watershed, x=post.baci))+
ggtitle("Posterior sample for BACI effect (log scale)",
subtitle="BACI computed as (AT-BT)-(AC-BC)")+
ggstance::geom_violinh()+
geom_text(data=baci.belief, label=formatC(baci.belief$post.belief.gt.0,2, format="f"),
aes(x=-Inf), hjust=-.2, vjust=1.5) +
xlab("BACI effect (log-scale) \nWith posterior belief that difference > 0")+
ylab("Watershed ")+
geom_vline(xintercept=0)+
facet_grid(Species~AgeClass)
# The dianostic plot is produced for the first fit as a demonstration
plyr::l_ply(baci.fits[1], function(x){
diag.plot <- sf.autoplot.lmer(x$fit)
plot(diag.plot)
})
# exclude species that only appear in 1 watershed
n.watersheds <- plyr::ddply(cue.data, c("Species"), plyr::summarize,
n.watersheds=length(unique(Watershed)))
n.watersheds
species.exclude <- n.watersheds[ n.watersheds$n.watersheds==1,]
species.exclude
dim(cue.data)
cue.data.red <- cue.data[ !cue.data$Species %in% species.exclude$Species, ]
dim(cue.data.red)
# exclude watersheds that don't have a BACI design
n.streams <- plyr::ddply(cue.data.red, "Watershed", plyr::summarize,
n.control  =length(unique(Stream[ CI=="C"])),
n.treatment=length(unique(Stream[ CI=="T"])))
n.streams
watershed.exclude <- n.streams[ n.streams$n.control==0 | n.streams$n.treatment==0,]
watershed.exclude
dim(cue.data.red)
cue.data.red <- cue.data.red[ !cue.data.red$Watershed %in% watershed.exclude$Watershed, ]
dim(cue.data.red)
# Get all of the fits and store them in a list with the emmeans computatons
baci.g.fits <- plyr::dlply(cue.data.red, c("Species","AgeClass"), function(x){
#browser()
x$YearF <- factor(x$Year)
# If we use the log() in the fit, the emmeans package can do the back transform automatically for us
fit <- lmerTest::lmer(log(CUE+offset) ~ BA + CI + BA:CI +
(1|Watershed:CI)+(1|Watershed:BA)+(1|Watershed:CI:BA)+
(1|YearF) +(1|Stream) +(1|YearF:Stream), data=x)
# we create the emmeans object and then find the pairwise difference
fit.emmo <- emmeans::emmeans(fit, ~BA:CI)
BACI.diff.log <- summary(contrast(fit.emmo,list(baci=c(-1,1,1,-1))), infer=TRUE)
BACI.ratio    <- summary(contrast(fit.emmo,list(baci=c(-1,1,1,-1)), type="response"))
list(fit=fit,
BACI.diff.log=BACI.diff.log,
BACI.ratio=BACI.ratio)
})
# Show the results for one of the fits
baci.fits[[1]]$fit
baci.fits[[1]]$BACI.diff.log
baci.fits[[1]]$BACI.ratio
# Get all of the fits and store them in a list with the emmeans computatons
baci.g.effs <- plyr::ldply(baci.g.fits, function(x){x$BACI.diff.log})
#pretty up the output
temp<- baci.g.effs
num.col <- sapply(temp, is.numeric)
temp[,num.col] <- round(temp[,num.col],2)
temp$t.ratio <- NULL
temp
ggplot(data=baci.g.effs, aes(y=Watershed, x=estimate))+
ggtitle("Estimated GLOBAL BACI effects (log scale)",
subtitle="BACI computed as (AT-BT)-(AC-BC)")+
geom_point()+
ggplot2::geom_errorbarh( aes(xmin=lower.CL, xmax=upper.CL), height=.01)+
xlab("Estimated BACI effect (log-scale) and 95% ci and p-value")+
ylab("Watershed")+
geom_vline(xintercept=0)+
geom_text( label=format.pval(baci.effs$p.value, digits=2,eps=.0001), aes(x=-Inf), hjust=-.01, vjust=1.5)+
facet_grid(Species~AgeClass)
ggplot(data=baci.g.effs, aes(y="GLOBAL", x=estimate))+
ggtitle("Estimated GLOBAL BACI effects (log scale)",
subtitle="BACI computed as (AT-BT)-(AC-BC)")+
geom_point()+
ggplot2::geom_errorbarh( aes(xmin=lower.CL, xmax=upper.CL), height=.01)+
xlab("Estimated BACI effect (log-scale) and 95% ci and p-value")+
ylab("Watershed")+
geom_vline(xintercept=0)+
geom_text( label=format.pval(baci.effs$p.value, digits=2,eps=.0001), aes(x=-Inf), hjust=-.01, vjust=1.5)+
facet_grid(Species~AgeClass)
ggplot(data=baci.g.effs, aes(y="GLOBAL", x=estimate))+
ggtitle("Estimated GLOBAL BACI effects (log scale)",
subtitle="BACI computed as (AT-BT)-(AC-BC)")+
geom_point()+
ggplot2::geom_errorbarh( aes(xmin=lower.CL, xmax=upper.CL), height=.01)+
xlab("Estimated BACI effect (log-scale) and 95% ci and p-value")+
ylab("Watershed")+
geom_vline(xintercept=0)+
geom_text( label=format.pval(baci.g.effs$p.value, digits=2,eps=.0001), aes(x=-Inf), hjust=-.01, vjust=1.5)+
facet_grid(Species~AgeClass)
# Extract the BACI x watershed standard deviation
baci.g.w.baci.sd <- plyr::ldply(baci.g.fits, function(x){
browser()
vc <- as.data.frame(x$fit)
data.frame(w.baci.sd = vc[ vc$grp==1, "sdcor"])
})
vc <- as.data.frame(x$fit)
# Extract the BACI x watershed standard deviation
baci.g.w.baci.sd <- plyr::ldply(baci.g.fits, function(x){
browser()
vc <- as.data.frame(VarCorr(x$fit))
data.frame(w.baci.sd = vc[ vc$grp==1, "sdcor"])
})
vc <- as.data.frame(VarCorr(x$fit))
vc
as.data.frame(VarCorr(x$fit))
vc <- VarCorr( baci.g.fits[[1]]$fit)
vc
vc <- as.data.frame(vc)
vc
# Extract the BACI x watershed standard deviation
baci.g.w.baci.sd <- plyr::ldply(baci.g.fits, function(x){
#browser()
vc <- as.data.frame(VarCorr(x$fit))
data.frame(w.baci.sd = vc[ vc$grp=="Watershed:CI:BA", "sdcor"])
})
baci.g.w.baci.sd
# sample from the posterior for the BACI effect, plot the violin plots and compute the posterior belief that BACI effect >0
# Again, need to be careful that the sign of the contrast for the BACI effect is correct.
baci.g.post <- plyr::ldply(baci.g.fits, function(x){
#browser()
post.samples <- arm::sim(x$fit, n.sims=n.sims.post)
data.frame(post.baci = -post.samples@fixef[,"BABefore:CIT"]) # notice that R computes before-after
})
head(baci.g.post)
# compute the posterior belief that difference (A-B) > 0
baci.g.belief <- plyr::ddply(baci.post, c("Species","AgeClass"),
plyr::summarize,
post.belief.gt.0 = mean(post.baci >0))
head(baci.g.belief)
ggplot(data=baci.g.post, aes(y="GLOBAL", x=post.baci))+
ggtitle("Posterior sample for GLOBAL BACI effect (log scale)",
subtitle="BACI computed as (AT-BT)-(AC-BC)")+
ggstance::geom_violinh()+
geom_text(data=baci.g.belief, label=formatC(baci.g.belief$post.belief.gt.0,2, format="f"),
aes(x=-Inf), hjust=-.2, vjust=1.5) +
xlab("BACI effect (log-scale) \nWith posterior belief that difference > 0")+
ylab("Watershed ")+
geom_vline(xintercept=0)+
facet_grid(Species~AgeClass)
# compute the posterior belief that difference (A-B) > 0
baci.g.belief <- plyr::ddply(baci.g.post, c("Species","AgeClass"),
plyr::summarize,
post.belief.gt.0 = mean(post.baci >0))
head(baci.g.belief)
ggplot(data=baci.g.post, aes(y="GLOBAL", x=post.baci))+
ggtitle("Posterior sample for GLOBAL BACI effect (log scale)",
subtitle="BACI computed as (AT-BT)-(AC-BC)")+
ggstance::geom_violinh()+
geom_text(data=baci.g.belief, label=formatC(baci.g.belief$post.belief.gt.0,2, format="f"),
aes(x=-Inf), hjust=-.2, vjust=1.5) +
xlab("BACI effect (log-scale) \nWith posterior belief that difference > 0")+
ylab("Watershed ")+
geom_vline(xintercept=0)+
facet_grid(Species~AgeClass)
# The dianostic plot is produced for the one of the fits as a demonstration
plyr::l_ply(baci.g.fits[1], function(x){
diag.plot <- sf.autoplot.lmer(x$fit)
plot(diag.plot)
})
help(package="arm")
# Generate simulated data for use in the report showing how to analyze the data.
# The simulated data sets will use the
#    - key species BLTR, RNTR, and BKTR
#      two age classes - immature, mature, both
# and will also include imputed 0 for species not seen at a year-site-visit.
# Get the existing data
#
source('read.data.r')
# This doesn't have the 0 records and we must impute them
# BLTR, BKTR, and RNTR analysis
age.classes.csv <- textConnection(
"Species, AgeClass, LBound, UBound
BLTR, Immature, 0, 150
BLTR, Mature, 150, Inf
RNTR, Immature, 0, 142
RNTR, Mature, 142, Inf
BKTR, AllAges, 0,  Inf")   # BKTR not divided because of sparseness
age.classes <- read.csv(age.classes.csv, header=TRUE, as.is=TRUE, strip.white=TRUE)
# select only species of interest above
xtabs(~Species, data=fish.data, exclude=NULL, na.action=na.pass)
fish.data <- fish.data[ fish.data$Species %in% age.classes$Species,]
xtabs(~Species, data=fish.data, exclude=NULL, na.action=na.pass)
# Divide fish by age class
fish.data <- plyr::ddply(fish.data, "Species", function(x, age.classes){
# match the age class with species of interest
age.classes <- age.classes[ age.classes$Species == x$Species[1],]
age.class <- apply(outer(x$ForkLength, age.classes$LBound, ">=")  &
outer(x$ForkLength, age.classes$UBound, "<" ), 1, which)
x$AgeClass <- age.classes$AgeClass[age.class]
x
}, age.classes=age.classes)
xtabs(~Species+AgeClass, data=fish.data, exclude=NULL, na.action=na.pass)
# Check if actual number of fish differs from nominal number of fish.
species.check.n <- plyr::ddply(fish.data,
c("Watershed","Stream","Year","Site","Species"), plyr::summarize,
nominal.fish= Captured_C[1],
actual.fish  = length(Species))
head(species.check.n)
species.check.n[ species.check.n$nominal.fish != species.check.n$actual.fish,]
# Count number of fish in each age class
species.n <- plyr::ddply(fish.data,
c("Watershed","Stream","Year","Site","Species","AgeClass"), plyr::summarize,
n.fish=length(Species),
distance=min(Distance))
head(species.n)
# We need to add back Stream-Year-Sites where 0 fish were captured
# Note that RNTR only occurs in the Athbathsak/NSask watersheds and in Mackenzie and Moon streams
# so we need to remove all other watersheds/streams for this species.
dim(species.n)
xtabs(~Stream+Year, data=species.n, exclude=NULL, na.action=na.pass)
# expand the site table for each species of interest
dim(site.table)
expanded.site.table <- plyr::ddply(age.classes[,c("Species","AgeClass")],
c("Species","AgeClass"), function(SA, site.table){
site.table$Species <- SA$Species
site.table$AgeClass<- SA$AgeClass
site.table
}, site.table=site.table)
dim(expanded.site.table)
expanded.site.table.complete <- expanded.site.table # has all streams
xtabs(~interaction(Watershed,Stream,drop=TRUE)+Species, data=expanded.site.table)
# Remove RNTR from all but MacKenzie and Moon streams
select <- (!expanded.site.table$Stream %in% c("Mackenzie","Moon")) &
expanded.site.table$Species %in% c("RNTR")
expanded.site.table[select,c("Watershed","Stream","Species")]
expanded.site.table <- expanded.site.table[!select,]
xtabs(~interaction(Watershed,Stream,drop=TRUE)+Species, data=expanded.site.table)
dim(species.n)
species.n <- merge(species.n, cbind(expanded.site.table[,c("Watershed","Stream","Year","Site","Species","AgeClass","siteDistance")]),
all.y=TRUE)
dim(species.n)
xtabs(~Stream+Year, data=species.n, exclude=NULL, na.action=na.pass)
xtabs(~interaction(Watershed,Stream, drop=TRUE)+Species, data=species.n)
# replace all Distance = NA by distance=0
species.n$distance[ is.na(species.n$distance)] <- species.n$siteDistance[ is.na(species.n$distance)]
# replace all NA  for the fish counts by 0
species.n$n.fish[ is.na(species.n$n.fish)] <- 0
# compute and plot the CUE (fish/300 m)
species.n$CUE <- species.n$n.fish  /species.n$distance * 300
# Check now that we have all of the data we need
dim(species.n)
names(species.n)
head(species.n)
xtabs(~interaction(Stream,Site,drop=TRUE)+Year, data=species.n, exclude=NULL, na.action=na.pass)
species.n[ species.n$Stream == "Fall",]
# All of the years in the data base are "Before"
species.n$BA <- "Before"
# Specify the Treated or Control Streams
stream.treatment.csv <- textConnection(
"Stream,  CI
Elk, C
Cutoff, C
Rocky, T
Limestone, C
Moon, C,
Mackenzie, T
Thistle, C
Fall, T")
stream.treatment <- read.csv(stream.treatment.csv, header=TRUE, as.is=TRUE, strip.white=TRUE)
# check that streams are all coded
setdiff(stream.treatment$Stream, species.n$Stream)
setdiff(species.n$Stream, stream.treatment$Stream)
# add CI to the data
species.n <- merge(species.n, stream.treatment)
# All streams to be mesured in 2018 onwards (after period) in every year
# Generate 5 years of data with similar numbers of sites measured/year
# and similar year effects etc.
# This is done by finding the variance components and using to generate the data
# This is done for each species
xtabs(~Stream+Year, data=species.n)
set.seed(234234)
new.years=2018:2023
stream.year.sites <- unique(species.n[, c("Stream","Year","Site")])
stream.year.n.sites <- plyr::ddply(stream.year.sites, c("Stream","Year"), plyr::summarize, n.sites=length(Site))
# How many sites will be sampled?
new.stream.year.n.sites <- expand.grid(Stream=unique(stream.year.sites$Stream), Year=new.years, stringsAsFactors=FALSE)
new.stream.year.n.sites$n.sites <- sample(stream.year.n.sites$n.sites, nrow(new.stream.year.n.sites), replace=TRUE)
new.stream.year.n.sites
species.n.sim <- plyr::ddply(species.n, c("Species","AgeClass"), function(x,new.years, stream.year.n.sites){
x$WatershedF <- factor(x$Watershed)
x$StreamF    <- factor(x$Stream)
x$YearF      <- factor(x$Year)
x$SiteF      <- factor(x$Site)
offset <- 0.5 * min(x$CUE[x$CUE>0])
#browser()
fit <- lmerTest::lmer(log(CUE+offset) ~
(1|StreamF)   +
(1|YearF)+
(1|StreamF:YearF), data=x)
rand.eff <- ranef(fit)
new.data <- expand.grid(Stream=unique(x$Stream), Year=new.years, stringsAsFactors=FALSE)
# Generate multiple sites at each stream-year. We sample from observed data.
new.data <- merge(new.data, stream.year.n.sites)
#browser()
# expand for each site
new.data <- plyr::adply(new.data, 1, function(x){x[rep(1,x$n.sites),]})
new.data <- merge(new.data, unique(x[,c("Stream","Watershed","CI")]), all.x=TRUE)
new.data$BA <- 'After'
new.data$Site <- paste("S",1:nrow(new.data),sep="")
# add back stream effect
stream.eff <- data.frame(stream.eff=unlist(rand.eff$StreamF$"(Intercept)"),
Stream = row.names(rand.eff$StreamF))
new.data <- merge(new.data, stream.eff, all.x=TRUE)
# generate new year effects by sampling from existing values
year.eff <- data.frame(Year=new.years,
year.eff=sample(unlist(rand.eff$YearF$"(Intercept)"), length(new.years), replace=TRUE))
new.data <- merge(new.data, year.eff, all.x=TRUE)
# generate stream x year interactions
vc <- as.data.frame(VarCorr(fit))
sd.stream.year <- max(.1, vc[ vc$grp=="StreamF:YearF","sdcor"])
stream.year.eff <- unique(new.data[,c("Stream","Year")])
stream.year.eff$stream.year.eff <- rnorm(nrow(stream.year.eff), sd=sd.stream.year)
new.data <- merge(new.data, stream.year.eff, all.x=TRUE)
# Add everything together, generate the log(CUE+offset) and unlog
new.data$logCUE <- fixef(fit) + new.data$stream.eff + new.data$year.eff + new.data$stream.year.eff +
rnorm(nrow(new.data), sd=vc[ vc$grp=="Residual","sdcor"])
new.data$CUE <- pmax(0, round(exp(new.data$logCUE)-offset,2))
new.data[,c("Watershed","Stream","Year","CI","BA","Site","CUE")]
}, new.years=new.years, stream.year.n.sites=new.stream.year.n.sites)
head(species.n.sim)
min(species.n.sim$CUE)
unique(species.n.sim$Year)
unique(species.n$Year)
species.n <- plyr::rbind.fill(species.n, species.n.sim)
xtabs(~BA+Year, data=species.n, exclude=NULL, na.action=na.pass)
xtabs(~Stream+CI, data=species.n, exclude=NULL,na.action=na.pass)
library(arm)
library(lmerTest)
# Generate simulated data for use in the report showing how to analyze the data.
# The simulated data sets will use the
#    - key species BLTR, RNTR, and BKTR
#      two age classes - immature, mature, both
# and will also include imputed 0 for species not seen at a year-site-visit.
# Get the existing data
#
source('read.data.r')
library(arm)
library(lmerTest)
# This doesn't have the 0 records and we must impute them
# BLTR, BKTR, and RNTR analysis
age.classes.csv <- textConnection(
"Species, AgeClass, LBound, UBound
BLTR, Immature, 0, 150
BLTR, Mature, 150, Inf
RNTR, Immature, 0, 142
RNTR, Mature, 142, Inf
BKTR, AllAges, 0,  Inf")   # BKTR not divided because of sparseness
age.classes <- read.csv(age.classes.csv, header=TRUE, as.is=TRUE, strip.white=TRUE)
# select only species of interest above
xtabs(~Species, data=fish.data, exclude=NULL, na.action=na.pass)
fish.data <- fish.data[ fish.data$Species %in% age.classes$Species,]
xtabs(~Species, data=fish.data, exclude=NULL, na.action=na.pass)
# Divide fish by age class
fish.data <- plyr::ddply(fish.data, "Species", function(x, age.classes){
# match the age class with species of interest
age.classes <- age.classes[ age.classes$Species == x$Species[1],]
age.class <- apply(outer(x$ForkLength, age.classes$LBound, ">=")  &
outer(x$ForkLength, age.classes$UBound, "<" ), 1, which)
x$AgeClass <- age.classes$AgeClass[age.class]
x
}, age.classes=age.classes)
xtabs(~Species+AgeClass, data=fish.data, exclude=NULL, na.action=na.pass)
# Check if actual number of fish differs from nominal number of fish.
species.check.n <- plyr::ddply(fish.data,
c("Watershed","Stream","Year","Site","Species"), plyr::summarize,
nominal.fish= Captured_C[1],
actual.fish  = length(Species))
head(species.check.n)
species.check.n[ species.check.n$nominal.fish != species.check.n$actual.fish,]
# Count number of fish in each age class
species.n <- plyr::ddply(fish.data,
c("Watershed","Stream","Year","Site","Species","AgeClass"), plyr::summarize,
n.fish=length(Species),
distance=min(Distance))
head(species.n)
# We need to add back Stream-Year-Sites where 0 fish were captured
# Note that RNTR only occurs in the Athbathsak/NSask watersheds and in Mackenzie and Moon streams
# so we need to remove all other watersheds/streams for this species.
dim(species.n)
xtabs(~Stream+Year, data=species.n, exclude=NULL, na.action=na.pass)
# expand the site table for each species of interest
dim(site.table)
expanded.site.table <- plyr::ddply(age.classes[,c("Species","AgeClass")],
c("Species","AgeClass"), function(SA, site.table){
site.table$Species <- SA$Species
site.table$AgeClass<- SA$AgeClass
site.table
}, site.table=site.table)
dim(expanded.site.table)
expanded.site.table.complete <- expanded.site.table # has all streams
xtabs(~interaction(Watershed,Stream,drop=TRUE)+Species, data=expanded.site.table)
# Remove RNTR from all but MacKenzie and Moon streams
select <- (!expanded.site.table$Stream %in% c("Mackenzie","Moon")) &
expanded.site.table$Species %in% c("RNTR")
expanded.site.table[select,c("Watershed","Stream","Species")]
expanded.site.table <- expanded.site.table[!select,]
xtabs(~interaction(Watershed,Stream,drop=TRUE)+Species, data=expanded.site.table)
dim(species.n)
species.n <- merge(species.n, cbind(expanded.site.table[,c("Watershed","Stream","Year","Site","Species","AgeClass","siteDistance")]),
all.y=TRUE)
dim(species.n)
xtabs(~Stream+Year, data=species.n, exclude=NULL, na.action=na.pass)
xtabs(~interaction(Watershed,Stream, drop=TRUE)+Species, data=species.n)
# replace all Distance = NA by distance=0
species.n$distance[ is.na(species.n$distance)] <- species.n$siteDistance[ is.na(species.n$distance)]
# replace all NA  for the fish counts by 0
species.n$n.fish[ is.na(species.n$n.fish)] <- 0
# compute and plot the CUE (fish/300 m)
species.n$CUE <- species.n$n.fish  /species.n$distance * 300
# Check now that we have all of the data we need
dim(species.n)
names(species.n)
head(species.n)
xtabs(~interaction(Stream,Site,drop=TRUE)+Year, data=species.n, exclude=NULL, na.action=na.pass)
species.n[ species.n$Stream == "Fall",]
# All of the years in the data base are "Before"
species.n$BA <- "Before"
# Specify the Treated or Control Streams
stream.treatment.csv <- textConnection(
"Stream,  CI
Elk, C
Cutoff, C
Rocky, T
Limestone, C
Moon, C,
Mackenzie, T
Thistle, C
Fall, T")
stream.treatment <- read.csv(stream.treatment.csv, header=TRUE, as.is=TRUE, strip.white=TRUE)
# check that streams are all coded
setdiff(stream.treatment$Stream, species.n$Stream)
setdiff(species.n$Stream, stream.treatment$Stream)
# add CI to the data
species.n <- merge(species.n, stream.treatment)
# All streams to be mesured in 2018 onwards (after period) in every year
# Generate 5 years of data with similar numbers of sites measured/year
# and similar year effects etc.
# This is done by finding the variance components and using to generate the data
# This is done for each species
xtabs(~Stream+Year, data=species.n)
set.seed(234234)
new.years=2018:2023
stream.year.sites <- unique(species.n[, c("Stream","Year","Site")])
stream.year.n.sites <- plyr::ddply(stream.year.sites, c("Stream","Year"), plyr::summarize, n.sites=length(Site))
# How many sites will be sampled?
new.stream.year.n.sites <- expand.grid(Stream=unique(stream.year.sites$Stream), Year=new.years, stringsAsFactors=FALSE)
new.stream.year.n.sites$n.sites <- sample(stream.year.n.sites$n.sites, nrow(new.stream.year.n.sites), replace=TRUE)
new.stream.year.n.sites
species.n.sim <- plyr::ddply(species.n, c("Species","AgeClass"), function(x,new.years, stream.year.n.sites){
x$WatershedF <- factor(x$Watershed)
x$StreamF    <- factor(x$Stream)
x$YearF      <- factor(x$Year)
x$SiteF      <- factor(x$Site)
offset <- 0.5 * min(x$CUE[x$CUE>0])
#browser()
fit <- lmerTest::lmer(log(CUE+offset) ~
(1|StreamF)   +
(1|YearF)+
(1|StreamF:YearF), data=x)
rand.eff <- ranef(fit)
new.data <- expand.grid(Stream=unique(x$Stream), Year=new.years, stringsAsFactors=FALSE)
# Generate multiple sites at each stream-year. We sample from observed data.
new.data <- merge(new.data, stream.year.n.sites)
#browser()
# expand for each site
new.data <- plyr::adply(new.data, 1, function(x){x[rep(1,x$n.sites),]})
new.data <- merge(new.data, unique(x[,c("Stream","Watershed","CI")]), all.x=TRUE)
new.data$BA <- 'After'
new.data$Site <- paste("S",1:nrow(new.data),sep="")
# add back stream effect
stream.eff <- data.frame(stream.eff=unlist(rand.eff$StreamF$"(Intercept)"),
Stream = row.names(rand.eff$StreamF))
new.data <- merge(new.data, stream.eff, all.x=TRUE)
# generate new year effects by sampling from existing values
year.eff <- data.frame(Year=new.years,
year.eff=sample(unlist(rand.eff$YearF$"(Intercept)"), length(new.years), replace=TRUE))
new.data <- merge(new.data, year.eff, all.x=TRUE)
# generate stream x year interactions
vc <- as.data.frame(VarCorr(fit))
sd.stream.year <- max(.1, vc[ vc$grp=="StreamF:YearF","sdcor"])
stream.year.eff <- unique(new.data[,c("Stream","Year")])
stream.year.eff$stream.year.eff <- rnorm(nrow(stream.year.eff), sd=sd.stream.year)
new.data <- merge(new.data, stream.year.eff, all.x=TRUE)
# Add everything together, generate the log(CUE+offset) and unlog
new.data$logCUE <- fixef(fit) + new.data$stream.eff + new.data$year.eff + new.data$stream.year.eff +
rnorm(nrow(new.data), sd=vc[ vc$grp=="Residual","sdcor"])
new.data$CUE <- pmax(0, round(exp(new.data$logCUE)-offset,2))
new.data[,c("Watershed","Stream","Year","CI","BA","Site","CUE")]
}, new.years=new.years, stream.year.n.sites=new.stream.year.n.sites)
head(species.n.sim)
min(species.n.sim$CUE)
unique(species.n.sim$Year)
unique(species.n$Year)
species.n <- plyr::rbind.fill(species.n, species.n.sim)
xtabs(~BA+Year, data=species.n, exclude=NULL, na.action=na.pass)
xtabs(~Stream+CI, data=species.n, exclude=NULL,na.action=na.pass)
write.csv(species.n[, c("Species","AgeClass","Watershed","Stream","Year","CI","BA","Site","CUE")],
file="simulated.data.csv", row.names=FALSE)
xtabs(~Stream+Year, data=species.n, exclude=NULL,na.action=na.pass)
xtabs(~Stream+paste(Year,'.',BA,sep=""), data=species.n, exclude=NULL,na.action=na.pass)
xtabs(~Stream+paste(Year,'.',substr(BA,1,1),sep=""), data=species.n, exclude=NULL,na.action=na.pass)
# Thistle Creek doesn't have two years before so we make 2018 also a before year
species.n$BA[ species.n$Year==2018] <- "Before"
xtabs(~Stream+paste(Year,'.',substr(BA,1,1),sep=""), data=species.n, exclude=NULL,na.action=na.pass)
write.csv(species.n[, c("Species","AgeClass","Watershed","Stream","Year","CI","BA","Site","CUE")],
file="simulated.data.csv", row.names=FALSE)
